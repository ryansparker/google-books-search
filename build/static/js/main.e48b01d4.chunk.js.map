{"version":3,"sources":["components/Header/index.js","components/Search/index.js","components/ABook/index.js","components/BookList/index.js","components/Books/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","props","useState","query","setQuery","action","type","placeholder","value","onChange","event","target","fetch","then","response","json","data","setBooks","ABook","console","log","src","volumeInfo","imageLinks","thumbnail","title","authors","description","onClick","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","id","BookList","undefined","books","items","map","book","key","Books","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iWAceA,MAXf,WAEI,OACI,yBAAKC,UAAU,kBACnB,oD,mBCwBWC,MA1Bf,SAAgBC,GAAQ,IAAD,EAEOC,mBAAS,IAFhB,mBAEZC,EAFY,KAELC,EAFK,KAanB,OACI,yBAAKL,UAAU,eACX,0BAAMM,OAAO,IAEf,2BAAOC,KAAK,OAAOC,YAAY,YAAYC,MAAOL,EAAOM,SAZ/D,SAAsBC,GAClBN,EAASM,EAAMC,OAAOH,OAEtBI,MAAM,iDAAD,OAAkDF,EAAMC,OAAOH,MAA/D,gBALG,4CAMHK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIf,EAAMgB,SAASD,SAQ/B,2BAAOV,KAAK,SAASE,MAAM,c,YCiBtBU,MAnCf,SAAejB,GAoBX,OADJkB,QAAQC,IAAInB,GAEJ,yBAAKF,UAAU,WACf,yBAAKA,UAAU,aAAY,yBAAKsB,IAAMpB,EAAMqB,WAAWC,WAAatB,EAAMqB,WAAWC,WAAWC,UAAY,MAC5G,yBAAKzB,UAAU,aACf,2CAAiBE,EAAMqB,WAAWG,MAAlC,KACA,4CAAkBxB,EAAMqB,WAAWI,QAAUzB,EAAMqB,WAAWI,QAAQ,GAAK,IAC3E,2CAAiBzB,EAAMqB,WAAWK,aAClC,4BAAQrB,KAAK,SAASsB,QAzB1B,WACIhB,MAAM,GAAD,OALD,wBAKC,UAAiB,CAClBiB,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACP,eAAgB,oBAGlBC,SAAU,SACVC,eAAgB,cAChBC,KAAMC,KAAKC,UAAU,CAACC,GAAItC,EAAMsC,SAapC,WCZOC,MAhBf,SAAkBvC,GAGlB,OAFAkB,QAAQC,IAAInB,QAEYwC,IAApBxC,EAAMyC,MAAMC,MACL,KAIN,yBAAK5C,UAAU,oBACXE,EAAMyC,MAAMC,MAAMC,KAAI,SAAAC,GAAS,OAAO,kBAAC,EAAD,iBAAWA,EAAX,CAAiBC,IAAOD,EAAKN,WCa7DQ,MAlBf,WAAkB,IAAD,EAEa7C,mBAAS,IAFtB,mBAENwC,EAFM,KAECzB,EAFD,KAOb,OACE,yBAAKlB,UAAU,iBACb,kBAAC,EAAD,CAAQkB,SAAWA,IACnB,kBAAC,EAAD,CAAUyB,MAAQA,MCCXM,MAXf,WAEE,OACA,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.e48b01d4.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nfunction Header() {\n\n    return(\n        <div className=\"header-wrapper\">\n    <h1>React Google Books</h1>\n    </div>\n    )\n    \n}\n\n\nexport default Header\n\n// API KEY\n// AIzaSyAVIIpii234JV1cNjS__FlXtEIS8cavCIM","import React, { useState } from 'react'\nimport './style.css'\n\n//props=setBooks\n\nfunction Search(props) {\n\n    const [query, setQuery] = useState(\"\");\n    const API = \"AIzaSyAVIIpii234JV1cNjS__FlXtEIS8cavCIM\"\n\n    function handleChange(event) {\n        setQuery(event.target.value)\n\n        fetch(`https://www.googleapis.com/books/v1/volumes?q=${event.target.value}&key=${API}`)\n            .then(response => response.json())\n            .then(data => props.setBooks(data));\n    }\n\n    return(\n        <div className='search-area'>\n            <form action=\"\">\n          \n          <input type=\"text\" placeholder=\"Book name\" value={query} onChange={handleChange}/>\n          <input type=\"submit\" value=\"Search\" />\n          </form>\n      </div>\n    )\n    \n}\n\n\nexport default Search\n\n","import React from 'react'\nimport './style.css'\n\nconst url = 'http://localhost:3000'\n\nfunction ABook(props) {\n\n    function handleClick() {\n        fetch(`${url}/saved`, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n              'Content-Type': 'application/json'\n              // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify({id: props.id}) // body data type must match \"Content-Type\" header\n        \n          });\n    }\n\nconsole.log(props)\n    return(\n        <div className=\"wrapper\">\n        <div className=\"thumbnail\"><img src= {props.volumeInfo.imageLinks ? props.volumeInfo.imageLinks.thumbnail : \"\"} /></div>\n        <div className=\"book-info\">\n        <h2>Book Title: {props.volumeInfo.title} </h2>\n        <h3>Book Author: {props.volumeInfo.authors ? props.volumeInfo.authors[0] : \"\"}</h3>\n        <p>description: {props.volumeInfo.description}</p>\n        <button type=\"button\" onClick={handleClick}>SAVE</button>\n        </div>\n        </div>\n    )\n    \n}\n\n\nexport default ABook\n\n","import React from 'react'\nimport './style.css'\nimport ABook from '../ABook'\n\nfunction BookList(props) {\nconsole.log(props)\n\nif (props.books.items===undefined){\n    return null\n}\n\n    return(\n     <div className='booklist-wrapper'>\n        {props.books.items.map(book => {return <ABook {...book} key = {book.id} />})}\n     </div>\n    )\n    \n}\n\n\nexport default BookList\n\n","import React, { useState } from 'react'\nimport './style.css'\nimport Search from '../Search'\nimport BookList from '../BookList'\n\n\n\n\nfunction Books() {\n\n    const [books, setBooks] = useState([]);\n \n  \n\n\n    return(\n      <div className=\"books-wrapper\">\n        <Search setBooks={ setBooks }/>\n        <BookList books={ books }/>\n      \n      </div>\n    )\n    \n}\n\n\nexport default Books\n\n// API KEY\n// AIzaSyAVIIpii234JV1cNjS__FlXtEIS8cavCIM","import React from 'react'\nimport './App.css'\nimport Header from './components/Header'\nimport Books from './components/Books'\n\n\n\n\nfunction App() {\n  \n  return (\n  <div>\n    <Header />\n    <Books />\n   \n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}